package src.test;

modes {
	high <: full;
	low <: high;
}

class AliasTest {
	static void Change(Foo foo) {
		foo.bar = null;
	}
	static void Change2(Foo foo) {
		foo.bar = null;
	}
	class Nested {
		public double value;
	}
	class Bar {
		public Nested nested = new Nested();
		public double value;
	}
	class Foo {
		public Bar bar;
		public Bar bar2;
		void foo() {
			Foo temp2 = this;
			Change(temp2);
			temp2.bar = new Bar();
			sustainable {
				
				//scan, collect list of method invocations, and calibrate only if appears here
				temp2.bar.nested.value += 1;
			}
			bsupply(1)
			demand(temp2.bar.nested.value) -> (temp2.bar.value + temp2.bar.nested.value + 10);
		}
		void foo2() {
			Foo temp = this;
			temp.bar = null;
			temp.bar.value = 0;
			temp.bar.nested = null;
			temp.bar.nested.value = 0;
			
			/*bar = bar2;
			bar2 = bar;
			bar2.value = 0;
			bar2.nested = null;
			bar2.nested.value = 0;
			bar2 = null;*/
		}
	}
	public void main(String[] args) {
		Foo foo = new Foo();
		foo.foo();
		foo.foo2();
	}
}